{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  } else {\n    console.log(\"Can't Register to SW. Current env:\", process.env.NODE_ENV);\n  }\n}\nwindow.addEventListener('push', function (event) {\n  console.log('Push Notification received', event);\n  var data = {\n    title: 'New!',\n    content: 'Something new happened!'\n  };\n\n  if (event.data) {\n    data = JSON.parse(event.data.text());\n  }\n\n  var options = {\n    body: data.content,\n    icon: '/src/icons/logo.png',\n    badge: '/src/icons/logo.png'\n  };\n  event.waitUntil(window.registration.showNotification(data.title, options));\n});\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    console.log(\"SW is Registered!\");\n\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log(\"New content is available; please refresh.\");\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/admin/Desktop/vpaynew/client/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","event","data","title","content","JSON","parse","text","options","body","icon","badge","waitUntil","registration","showNotification","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  } else {\n    console.log(\"Can't Register to SW. Current env:\", process.env.NODE_ENV);\n  }\n}\n\n\nwindow.addEventListener('push', function(event) {\n  console.log('Push Notification received', event);\n\n  var data = {title: 'New!', content: 'Something new happened!'};\n\n  if (event.data) {\n    data = JSON.parse(event.data.text());\n  }\n\n  var options = {\n    body: data.content,\n    icon: '/src/icons/logo.png',\n    badge: '/src/icons/logo.png'\n  };\n\n  event.waitUntil(\n    window.registration.showNotification(data.title, options)\n  );\n});\n\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log(\"SW is Registered!\");\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}